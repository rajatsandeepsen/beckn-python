# coding: utf-8

"""
    Beckn Protocol Core

    Beckn Core Transaction API specification

    The version of the OpenAPI document: 1.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr

class Vehicle(BaseModel):
    """
    Describes a vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.<br>This has properties like category, capacity, make, model, size,variant,color,energy_type,registration  # noqa: E501
    """
    category: Optional[StrictStr] = None
    capacity: Optional[StrictInt] = None
    make: Optional[StrictStr] = None
    model: Optional[StrictStr] = None
    size: Optional[StrictStr] = None
    variant: Optional[StrictStr] = None
    color: Optional[StrictStr] = None
    energy_type: Optional[StrictStr] = None
    registration: Optional[StrictStr] = None
    wheels_count: Optional[StrictStr] = None
    cargo_volumne: Optional[StrictStr] = None
    wheelchair_access: Optional[StrictStr] = None
    code: Optional[StrictStr] = None
    emission_standard: Optional[StrictStr] = None
    __properties = ["category", "capacity", "make", "model", "size", "variant", "color", "energy_type", "registration", "wheels_count", "cargo_volumne", "wheelchair_access", "code", "emission_standard"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Vehicle:
        """Create an instance of Vehicle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Vehicle:
        """Create an instance of Vehicle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Vehicle.parse_obj(obj)

        _obj = Vehicle.parse_obj({
            "category": obj.get("category"),
            "capacity": obj.get("capacity"),
            "make": obj.get("make"),
            "model": obj.get("model"),
            "size": obj.get("size"),
            "variant": obj.get("variant"),
            "color": obj.get("color"),
            "energy_type": obj.get("energy_type"),
            "registration": obj.get("registration"),
            "wheels_count": obj.get("wheels_count"),
            "cargo_volumne": obj.get("cargo_volumne"),
            "wheelchair_access": obj.get("wheelchair_access"),
            "code": obj.get("code"),
            "emission_standard": obj.get("emission_standard")
        })
        return _obj


