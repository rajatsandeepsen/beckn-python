# coding: utf-8

"""
    Beckn Protocol Meta API

    This document contains all the meta API endpoints that are implemented by the network participants. The information returned from these endpoints typically contain cacheable information.

    The version of the OpenAPI document: 1.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from meta.models.inline_object_message_ack import InlineObjectMessageAck

class InlineObjectMessage(BaseModel):
    """
    InlineObjectMessage
    """
    ack: InlineObjectMessageAck = Field(...)
    __properties = ["ack"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InlineObjectMessage:
        """Create an instance of InlineObjectMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ack
        if self.ack:
            _dict['ack'] = self.ack.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InlineObjectMessage:
        """Create an instance of InlineObjectMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InlineObjectMessage.parse_obj(obj)

        _obj = InlineObjectMessage.parse_obj({
            "ack": InlineObjectMessageAck.from_dict(obj.get("ack")) if obj.get("ack") is not None else None
        })
        return _obj


