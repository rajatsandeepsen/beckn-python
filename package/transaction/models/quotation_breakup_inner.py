# coding: utf-8

"""
    Beckn Protocol Core

    Beckn Core Transaction API specification

    The version of the OpenAPI document: 1.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from transaction.models.item import Item
from transaction.models.price import Price

class QuotationBreakupInner(BaseModel):
    """
    QuotationBreakupInner
    """
    item: Optional[Item] = None
    title: Optional[StrictStr] = None
    price: Optional[Price] = None
    __properties = ["item", "title", "price"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QuotationBreakupInner:
        """Create an instance of QuotationBreakupInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of item
        if self.item:
            _dict['item'] = self.item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QuotationBreakupInner:
        """Create an instance of QuotationBreakupInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QuotationBreakupInner.parse_obj(obj)

        _obj = QuotationBreakupInner.parse_obj({
            "item": Item.from_dict(obj.get("item")) if obj.get("item") is not None else None,
            "title": obj.get("title"),
            "price": Price.from_dict(obj.get("price")) if obj.get("price") is not None else None
        })
        return _obj


